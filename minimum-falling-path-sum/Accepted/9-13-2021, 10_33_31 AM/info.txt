{"id":554031377,"lang":"cpp","time":"37Â minutes","timestamp":1631509411,"status_display":"Accepted","runtime":"12 ms","url":"/submissions/detail/554031377/","is_pending":"Not Pending","title":"Minimum Falling Path Sum","memory":"9.5 MB","code":"class Solution {\npublic:\n\n    int dp[101][101];\n\n    int dfs(int r,int c,vector<vector<int>>& matrix)\n    {   \n        if(dp[r][c]!=-1)return dp[r][c];\n        if(r+1<matrix.size())\n        {\n            int ans=INT_MAX;\n            ans=min(ans,matrix[r][c]+dfs(r+1,c,matrix));\n            if(c-1>=0)\n            ans=min(ans,matrix[r][c]+dfs(r+1,c-1,matrix));\n            if(c+1<matrix.size())\n            ans=min(ans,matrix[r][c]+dfs(r+1,c+1,matrix));\n            return dp[r][c]=ans;\n        }\n         return dp[r][c]=matrix[r][c];\n    }\n\n    int minFallingPathSum(vector<vector<int>>& matrix) {\n        int ans=INT_MAX;\n        memset(dp,-1,sizeof(dp));\n        for(int i=0;i<matrix.size();i++)\n        {\n            ans=min(ans,dfs(0,i,matrix));\n        }\n        return ans;\n    }\n};","compare_result":"111111111111111111111111111111111111111111111111","title_slug":"minimum-falling-path-sum"}