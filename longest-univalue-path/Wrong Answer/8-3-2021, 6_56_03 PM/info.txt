{"id":532652820,"lang":"cpp","time":"1 month, 1 week","timestamp":1627997163,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/532652820/","is_pending":"Not Pending","title":"Longest Univalue Path","memory":"N/A","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n\n    int ans=INT_MIN;\n\n    int calc(TreeNode* root,unordered_set<TreeNode*>& vis,int value)\n    {\n        if(!root || value!=root->val)return 0;\n        if(vis.find(root)!=vis.end())\n        {\n            return (calc(root->left,vis,root->val)+calc(root->right,vis,root->val));\n        }\n        vis.insert(root);\n        int temp=(1+calc(root->left,vis,root->val)+calc(root->right,vis,root->val));\n        ans=max(ans,temp-1);\n        return temp;\n    }\n\n    void inorder(TreeNode* root,unordered_set<TreeNode*>& vis)\n    {\n        if(!root)return ;\n        if(vis.find(root)!=vis.end())\n        {\n            inorder(root->left,vis);\n            inorder(root->right,vis);\n        }\n        calc(root,vis,root->val);\n        inorder(root->left,vis);\n        inorder(root->right,vis);\n    }\n\n    int longestUnivaluePath(TreeNode* root) {\n        unordered_set<TreeNode*>vis;\n        if(ans==INT_MIN)ans=0;\n        inorder(root,vis);\n        return ans;\n    }\n};","compare_result":"11111111111111111110001111110000000000000000000000000000000000000000000","title_slug":"longest-univalue-path"}