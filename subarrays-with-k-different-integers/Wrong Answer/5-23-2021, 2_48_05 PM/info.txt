{"id":497072372,"lang":"cpp","time":"3 months, 3 weeks","timestamp":1621761485,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/497072372/","is_pending":"Not Pending","title":"Subarrays with K Different Integers","memory":"N/A","code":"#pragma GCC optimize(\"Ofast\")  \n#pragma GCC target(\"avx,avx2,fma\") \nstatic auto _ = [] ()\n{ios_base::sync_with_stdio(false);cin.tie(nullptr);cout.tie(nullptr);return 0;}();\n\nclass Solution {\npublic:\n\n\tint subArrWithAtmostK(vector<int>& nums,int k)\n\t{\n\t\tif(k==0)\n\t\t\treturn 0;\n\t\tint n=nums.size();\n\t\tunordered_map<int,int>ump;\n\t\tint i=0;int j=0;int ans=0;\n\t\twhile(i<n && j<n)\n\t\t{\n\t\t\twhile(j<n && ump.size()<=k)\n\t\t\t{\n\t\t\t\tump[nums[j]]++;\n\t\t\t\tif(ump.size()<=k)\n\t\t\t\t\tans+=j-i+1;                \n\t\t\t\tj++;\n\t\t\t}\n\t\t\twhile(i<n && i<=j && ump.size()>k)\n\t\t\t{\n\t\t\t\tump[nums[i]]--;\n\t\t\t\tif(ump[nums[i]]==0)\n\t\t\t\t\tump.erase(nums[i]);\n\t\t\t\ti++;\n\t\t\t}\n\t\t\tans+=j-i;\n\t\t}\n\t\treturn ans;\n\t}\n\n    int subarraysWithKDistinct(vector<int>& nums, int k) {\n        \n        return (abs(subArrWithAtmostK(nums,k)-subArrWithAtmostK(nums,k-1)));\n    }\n};","compare_result":"1111010111010111010111011011111001110110111111111111111","title_slug":"subarrays-with-k-different-integers"}