{"id":547803873,"lang":"cpp","time":"1 week, 4 days","timestamp":1630502830,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/547803873/","is_pending":"Not Pending","title":"Flatten Binary Tree to Linked List","memory":"N/A","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n\n    void flatten(TreeNode* root) {\n        if(!root)return ;  \n        // cout<<root->val<<endl;\n        flatten(root->left);\n        flatten(root->right);\n        if(root->left and root->right)\n        {\n            // cout<<\"inside if \";\n            // cout<<root->val<<endl;\n            TreeNode* temp=root->right;\n            // cout<<\"temp val \"<<temp->val<<endl;\n            root->right=root->left;            \n            TreeNode* t2=root->right;\n            while(t2->right)\n            {\n                t2=t2->right;\n                t2->left=nullptr;\n            }\n            t2->right=temp;\n            t2->left=nullptr;\n            root->left=nullptr;\n            // cout<<\"root->right val \"<<root->right->val<<endl;\n            // cout<<\"root->right->right val \"<<root->right->right->val<<endl;\n        }\n        \n    }\n};","compare_result":"111011001000110100101000000010100101000000101001000101000000000000000001001010000001010010001010000000000000000101001010000001010000000100010000010100101000000000000000000000000000000000000000000000000100001000000000000000000","title_slug":"flatten-binary-tree-to-linked-list"}