{"id":507265431,"lang":"cpp","time":"3Â months","timestamp":1623579785,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/507265431/","is_pending":"Not Pending","title":"Palindrome Pairs","memory":"N/A","code":"#pragma GCC optimize(\"Ofast\")  \n#pragma GCC target(\"avx,avx2,fma\") \nstatic auto _ = [] ()\n{ios_base::sync_with_stdio(false);cin.tie(nullptr);cout.tie(nullptr);return 0;}();\n\nclass Solution {\npublic:\n    vector<vector<int>> palindromePairs(vector<string>& words) {\n        unordered_map<string,int>ump;\n        for(int i=0;i<words.size();i++)\n        {\n            ump[words[i]]=i;\n        }\n        vector<vector<int>>ans;\n        \n        for(int i=0;i<words.size();i++)\n        {\n            string temp=words[i];\n            string rev=string(temp.rbegin(),temp.rend());\n            if(temp==\"\")\n            {\n                for(int j=0;j<words.size();j++)\n                {\n                    if(i!=j and words[j]==string(words[j].begin(),words[j].end()))\n                    {\n                        ans.push_back({i,j});\n                        ans.push_back({j,i});\n                    }\n                }\n                continue;\n            }\n            if(ump.find(rev)!=ump.end() and temp.length()!=1)\n            {\n                ans.push_back({i,ump[rev]});\n            }            \n            for(int cut=1;cut<=temp.length();cut++)\n            {\n                string tmp=temp.substr(0,cut);\n                if(tmp==string(tmp.rbegin(),tmp.rend()))\n                {\n                    string tmp2=temp.substr(cut);\n                    reverse(tmp2.begin(),tmp2.end());\n                    if(tmp2.length()>0 and ump.find(tmp2)!=ump.end())\n                    {\n                        ans.push_back({ump[tmp2],i});\n                    }\n                }\n            }\n            for(int cut=temp.length()-1;cut>0;cut--)\n            {\n                string tmp=temp.substr(temp.length()-cut,temp.length());\n                if(tmp==string(tmp.rbegin(),tmp.rend()))\n                {\n                    string tmp2=temp.substr(0,temp.length()-cut);\n                    reverse(tmp2.begin(),tmp2.end());\n                    if(tmp2.length()>0 and ump.find(tmp2)!=ump.end())\n                    {\n                        ans.push_back({i,ump[tmp2]});\n                    }\n                }\n            }\n        }\n        \n        return ans;\n    }\n};","compare_result":"11100001000000100000000011000100000000001000000000000000000000000000000000000000000000000000000000000000000000000000111000100111101111","title_slug":"palindrome-pairs"}