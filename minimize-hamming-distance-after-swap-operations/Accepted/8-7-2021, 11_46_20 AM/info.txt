{"id":534553392,"lang":"cpp","time":"1Â month","timestamp":1628316980,"status_display":"Accepted","runtime":"540 ms","url":"/submissions/detail/534553392/","is_pending":"Not Pending","title":"Minimize Hamming Distance After Swap Operations","memory":"207.3 MB","code":"#pragma GCC optimize(\"Ofast\")\n#pragma GCC target(\"avx,avx2,fma\")\nstatic auto _ = []() {\n  ios_base::sync_with_stdio(false);\n  cin.tie(nullptr);\n  cout.tie(nullptr);\n  return 0;\n}();\n\nclass Solution {\npublic:\n\n    unordered_map<int,vector<int>>adjList;\n    unordered_set<int>vis;\n    vector<int> curr; \n    \n    void dfs(int s)\n    {\n        if(vis.find(s)==vis.end())\n        {\n            vis.insert(s);\n            curr.push_back(s);\n            vector<int>& candids=adjList[s];\n            for(int i=0;i<candids.size();i++)\n            {\n                dfs(candids[i]);\n            }\n        }\n    }\n\n    int minimumHammingDistance(vector<int>& source, vector<int>& target, vector<vector<int>>& allowedSwaps) {\n        for(int i=0;i<allowedSwaps.size();i++)\n        {\n            adjList[allowedSwaps[i][0]].push_back(allowedSwaps[i][1]);\n            adjList[allowedSwaps[i][1]].push_back(allowedSwaps[i][0]);\n        }\n        int ham=0;\n        for(int i=0;i<source.size();i++)\n        {\n            if(vis.find(i)!=vis.end())continue;\n            curr=vector<int> ();\n            dfs(i);\n            unordered_map<int,int>ump;\n            for(auto c:curr)ump[source[c]]++;\n            for(auto c:curr)\n            {\n                if(ump[target[c]]<1)ham++;\n                else\n                ump[target[c]]--;\n            }\n        }\n        return ham;\n    }\n};","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"minimize-hamming-distance-after-swap-operations"}