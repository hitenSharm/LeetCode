{"id":526912014,"lang":"cpp","time":"1 month, 3 weeks","timestamp":1627019290,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/526912014/","is_pending":"Not Pending","title":"Maximum Width of Binary Tree","memory":"N/A","code":"#pragma GCC optimize(\"Ofast\")\n#pragma GCC target(\"avx,avx2,fma\")\nstatic auto _ = []() {\n  ios_base::sync_with_stdio(false);\n  cin.tie(nullptr);\n  cout.tie(nullptr);\n  return 0;\n}();\n/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    int widthOfBinaryTree(TreeNode* root) {\n        queue<TreeNode*>q;\n        int ans=1;\n        q.push(root);\n        while(!q.empty())\n        {\n            int len=q.size();\n            int nonCnt=0;\n            int normCnt=0;            \n            for(int i=0;i<len;i++)\n            {\n                TreeNode* temp=q.front();                \n                q.pop();\n                if(temp->val==101)nonCnt++;\n                if(temp->val!=101)normCnt++;\n                if(normCnt>1 and temp->val!=101)\n                {                    \n                    normCnt+=nonCnt;\n                    nonCnt=0;\n                }\n                if(temp->left!=NULL)\n                {\n                    q.push(temp->left);\n                }\n                if(temp->left==NULL)\n                {\n                    TreeNode* t2=new TreeNode(101);\n                    q.push(t2);\n                }\n                if(temp->right!=NULL)\n                {\n                    q.push(temp->right);\n                }                \n                if(temp->right==NULL)\n                {\n                    TreeNode* t3=new TreeNode(101);\n                    q.push(t3);\n                }\n            }\n            if(normCnt==0 and nonCnt>0)break;\n            ans=max(ans,normCnt);\n        }\n        return ans;\n    }\n};","compare_result":"1111101111111111111111110111111111111111111011111010011110010010110111000000000000000000000000000000000000000000","title_slug":"maximum-width-of-binary-tree"}