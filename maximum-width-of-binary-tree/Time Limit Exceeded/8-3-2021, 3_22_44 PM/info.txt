{"id":532583371,"lang":"cpp","time":"1 month, 1 week","timestamp":1627984364,"status_display":"Time Limit Exceeded","runtime":"N/A","url":"/submissions/detail/532583371/","is_pending":"Not Pending","title":"Maximum Width of Binary Tree","memory":"N/A","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n\n    int level(TreeNode* root)\n    {\n        if(!root)return 0;\n        queue<TreeNode*>q;\n        q.push(root);\n        int level=0;\n        while(!q.empty())\n        {\n            int len=q.size();\n            for(int i=0;i<len;i++)\n            {\n                TreeNode* temp=q.front();\n                q.pop();\n                if(temp->left)q.push(temp->left);\n                if(temp->right)q.push(temp->right);\n            }\n            level++;\n        }\n        return level;\n    }\n    \n    int cntVal(vector<int>& arr)\n    {\n        int i=0,j=arr.size()-1;\n        \n        while(arr[i]==-101)\n        i++;\n        \n        while(arr[j]==-101)\n        j--;\n        \n        return (j-i+1);\n    }\n\n    int widthOfBinaryTree(TreeNode* root) {\n        vector<int>arr;\n        queue<TreeNode*>q;\n        q.push(root);\n        int lvl=0;\n        int h=level(root);\n        int maxi=0;        \n        while(!q.empty() and lvl<h)\n        {\n            int len=q.size();\n            vector<int>arr;\n            for(int i=0;i<len;i++)\n            {\n                TreeNode* temp=q.front();\n                q.pop();\n                if(!temp)\n                {\n                    arr.push_back(-101);\n                    q.push(nullptr);\n                    q.push(nullptr);\n                    continue ;\n                }\n                arr.push_back(temp->val);\n                if(!temp->left)q.push(nullptr);\n                if(temp->left)q.push(temp->left);\n                if(!temp->right)q.push(nullptr);\n                if(temp->right)q.push(temp->right);\n            }\n            maxi=max(maxi,cntVal(arr));\n            lvl++;\n        }\n        return maxi;\n    }\n};","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000","title_slug":"maximum-width-of-binary-tree"}