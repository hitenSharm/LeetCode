{"id":504423825,"lang":"cpp","time":"3 months, 1 week","timestamp":1623074409,"status_display":"Accepted","runtime":"216 ms","url":"/submissions/detail/504423825/","is_pending":"Not Pending","title":"Equal Sum Arrays With Minimum Number of Operations","memory":"113.9 MB","code":"#pragma GCC optimize(\"Ofast\")\n#pragma GCC target(\"avx,avx2,fma\")\nstatic auto _ = []() {\n  ios_base::sync_with_stdio(false);\n  cin.tie(nullptr);\n  cout.tie(nullptr);\n  return 0;\n}();\n\nclass Solution {\npublic:\n    int minOperations(vector<int>& nums1, vector<int>& nums2) {\n      if(6 * nums1.size() < 1 * nums2.size() || 6 * nums2.size() < 1 * nums1.size())\n            return -1;\n       int cumuFreq[6]={0};\n       int diff = accumulate(begin(nums1), end(nums1), 0) - accumulate(begin(nums2), end(nums2), 0);\n\n       if(diff > 0) swap(nums1, nums2);\n       \n       for(int i=0;i<nums1.size();i++)\n       cumuFreq[6-nums1[i]]++;\n\n       for(int i=0;i<nums2.size();i++)\n        cumuFreq[nums2[i]-1]++;\n\n      int ans=0;\n      \n\n      diff=abs(diff);\n            \n      \n      int index=5;\n      while(diff>0 and index>0)\n      {\n        if(cumuFreq[index]>0)\n        {\n          int ops=min(cumuFreq[index],(int)ceil(1.0 * diff / index));\n          diff=diff-(cumuFreq[index]*index);\n          cumuFreq[index]=cumuFreq[index]-ops;   \n          ans+=ops;       \n        }\n        index--;\n      }\n    return ans;\n    }\n};","compare_result":"1111111111111111111111111111111111111111111111111111111111111111","title_slug":"equal-sum-arrays-with-minimum-number-of-operations"}