{"id":553019762,"lang":"cpp","time":"1 day, 20 hours","timestamp":1631353043,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/553019762/","is_pending":"Not Pending","title":"Rotting Oranges","memory":"N/A","code":"class Solution {\npublic:\n    int orangesRotting(vector<vector<int>>& grid) {\n        queue<pair<int,int>>q;\n        int dirs[5]={1,0,-1,0,1};\n        int lvl=0;        \n        int rot=0,tot=0;\n        for(int i=0;i<grid.size();i++)\n        {\n            for(int j=0;j<grid[0].size();j++)\n            {\n                if(grid[i][j]==2)\n                {\n                    q.push({i,j});\n                    rot++;\n                }\n                if(grid[i][j]==1||grid[i][j]==2)tot++;\n            }\n        }\n        while(!q.empty())\n        {\n            int len=q.size();            \n            for(int i=0;i<len;i++)\n            {\n              int currI=q.front().first,currJ=q.front().second;                \n              q.pop();              \n              for(int k=0;k<4;k++)\n              {\n                  int newI=currI+dirs[k],newJ=currJ+dirs[k+1];\n                  if(newJ>=0 and newJ<grid[0].size() and newI>=0 and newI<grid.size() and grid[newI][newJ]==1)\n                  {\n                      grid[newI][newJ]=2;\n                      rot++;\n                      q.push({newI,newJ});\n                  }\n              }\n            }\n            lvl++;\n        }\n        if(rot!=tot)return -1;\n        return lvl-1;\n    }\n};","compare_result":"111011101111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"rotting-oranges"}