{"id":552919023,"lang":"cpp","time":"2Â days","timestamp":1631336285,"status_display":"Accepted","runtime":"4 ms","url":"/submissions/detail/552919023/","is_pending":"Not Pending","title":"Flip Equivalent Binary Trees","memory":"12.1 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    bool flipEquiv(TreeNode* root1, TreeNode* root2) {\n        if(!root1 and !root2)return true;\n        if(!root1 || !root2 || (root1->val!=root2->val))return false;  \n        int r1R=(root1->right?root1->right->val:-1);\n        int r2R=(root2->right?root2->right->val:-1);\n        int r1L=(root1->left?root1->left->val:-1);\n        int r2L=(root2->left?root2->left->val:-1);\n        if(r1L==r2R and r1R==r2L)\n        {\n            return (flipEquiv(root1->left,root2->right)&&flipEquiv(root1->right,root2->left));\n        }\n        if(r1L==r2L and r1R==r2R)\n        {\n            return (flipEquiv(root1->left,root2->left)&&flipEquiv(root1->right,root2->right));\n        }\n        return false;\n    }\n};","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"flip-equivalent-binary-trees"}