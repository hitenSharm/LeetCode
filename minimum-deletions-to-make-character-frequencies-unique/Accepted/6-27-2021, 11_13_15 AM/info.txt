{"id":513785853,"lang":"cpp","time":"2 months, 2 weeks","timestamp":1624772595,"status_display":"Accepted","runtime":"60 ms","url":"/submissions/detail/513785853/","is_pending":"Not Pending","title":"Minimum Deletions to Make Character Frequencies Unique","memory":"17.7 MB","code":"#pragma GCC optimize(\"Ofast\")\n#pragma GCC target(\"avx,avx2,fma\")\nstatic auto _ = []() {\n  ios_base::sync_with_stdio(false);\n  cin.tie(nullptr);\n  cout.tie(nullptr);\n  return 0;\n}();\n\nclass Solution {\npublic:\n\n    static bool cmp(pair<char,int>& a,pair<char,int>& b)\n    {\n        return (a.second<b.second);\n    }\n\n    int minDeletions(string s) {\n        unordered_map<char,int>ump;\n        \n        for(int i=0;i<s.length();i++)\n        ump[s[i]]++;\n        \n        vector<pair<char, int>> elems(ump.begin(), ump.end());\n        \n        sort(elems.begin(),elems.end(),cmp);\n        unordered_set<int>vis;\n        int dele=0;\n        \n        for(int i=0;i<elems.size();i++)\n        {\n            int x=elems[i].second;\n            while(x>0 and vis.find(x)!=vis.end())\n            {\n                x--;\n                dele++;\n            }\n            \n            if(x!=0)\n            vis.insert(x);\n        }\n        return dele;\n    }\n};","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"minimum-deletions-to-make-character-frequencies-unique"}