{"id":532519832,"lang":"cpp","time":"1 month, 1 week","timestamp":1627973825,"status_display":"Accepted","runtime":"24 ms","url":"/submissions/detail/532519832/","is_pending":"Not Pending","title":"Lowest Common Ancestor of a Binary Search Tree","memory":"23.2 MB","code":"#pragma GCC optimize(\"Ofast\")\n#pragma GCC target(\"avx,avx2,fma\")\nstatic auto _ = []() {\n  ios_base::sync_with_stdio(false);\n  cin.tie(nullptr);\n  cout.tie(nullptr);\n  return 0;\n}();\n/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n * };\n */\nclass Solution {\npublic:\n\n    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {\n        if(!root)return nullptr;\n        int mini=min(p->val,q->val);\n        int maxi=max(p->val,q->val);\n        if(root->val>maxi)return lowestCommonAncestor(root->left,p,q);\n        else if(root->val<mini)return lowestCommonAncestor(root->right,p,q);\n        else\n        return root;\n        //at this point ,if left subtree mein answer hota then range bhi usski hoti\n        return nullptr;\n    }\n};","compare_result":"111111111111111111111111111","title_slug":"lowest-common-ancestor-of-a-binary-search-tree"}