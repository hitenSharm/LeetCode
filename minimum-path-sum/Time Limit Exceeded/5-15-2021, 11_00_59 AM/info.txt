{"id":493311557,"lang":"cpp","time":"4Â months","timestamp":1621056659,"status_display":"Time Limit Exceeded","runtime":"N/A","url":"/submissions/detail/493311557/","is_pending":"Not Pending","title":"Minimum Path Sum","memory":"N/A","code":"class Solution {\npublic:\n    \n    int msum=INT_MAX;\n    \n    bool helper(int i,int j,vector<vector<int>> &grid)\n    {\n        if(i>=grid.size() || j>=grid[0].size() || i<0 || j<0 || grid[i][j]==-1)\n        {\n            return false;\n        }\n        return true;\n    }\n    \n    void backtrack(int sum,vector<vector<int>>& grid,int i,int j)\n    {\n        if(i==grid.size()-1 && j==grid[0].size()-1)\n        {            \n            msum=min(sum,msum);\n            return ;\n        }\n        //gen candidates , make move , undo move\n        if(helper(i+1,j,grid))\n        {\n            sum+=grid[i+1][j];\n            int temp=grid[i+1][j];\n            grid[i+1][j]=-1;\n            backtrack(sum,grid,i+1,j);\n            sum=sum-temp;\n            grid[i+1][j]=temp;\n        }\n        if(helper(i,j+1,grid))\n        {\n            sum+=grid[i][j+1];\n            int temp=grid[i][j+1];\n            grid[i][j+1]=-1;\n            backtrack(sum,grid,i,j+1);\n            sum=sum-temp;\n            grid[i][j+1]=temp;\n        }        \n    }\n\n\n    int minPathSum(vector<vector<int>>& grid) {\n        //need to implement dfs\n        int sum=grid[0][0];\n        grid[0][0]=-1;\n        backtrack(sum,grid,0,0);\n        return msum;\n        \n    }\n};","compare_result":"1111111111111111111100000000000000000000000000000000000000000","title_slug":"minimum-path-sum"}