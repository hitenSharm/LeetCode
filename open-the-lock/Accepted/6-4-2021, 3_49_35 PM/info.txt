{"id":502871647,"lang":"cpp","time":"3 months, 1 week","timestamp":1622801975,"status_display":"Accepted","runtime":"528 ms","url":"/submissions/detail/502871647/","is_pending":"Not Pending","title":"Open the Lock","memory":"119.9 MB","code":"#pragma GCC optimize(\"Ofast\")\n#pragma GCC target(\"avx,avx2,fma\")\nstatic auto _ = []() {\n  ios_base::sync_with_stdio(false);\n  cin.tie(nullptr);\n  cout.tie(nullptr);\n  return 0;\n}();\n\nclass Solution {\npublic:\n\n    vector<string> generateCandidates(string current)\n    {\n      vector<string>send;\n      for(int i=0;i<4;i++)\n      {\n        string temp=current;\n        temp[i]=(current[i] - '0' + 1) % 10 + '0';\n        send.push_back(temp);\n        temp[i]=(current[i] - '0' - 1 + 10) % 10 + '0';\n        send.push_back(temp);\n      }\n      return send;\n    }\n\n    int openLock(vector<string>& deadends, string target) {\n        unordered_map<string,int>ump;\n        for(int i=0;i<deadends.size();i++)\n          ump[deadends[i]]++;\n        string sol=\"0000\";\n        if(sol==target)return 0;\n        unordered_map<string,int>vis;\n        queue<string>bfs;\n        bfs.push(sol);\n        vis[sol]=1;\n        if(ump.find(sol)!=ump.end())return -1;\n        int ans=0;\n        \n        while(!bfs.empty())\n        {\n          int toExplore=bfs.size();\n          for(int i=0;i<toExplore;i++)\n          {\n            string curr=bfs.front();bfs.pop();\n            vector<string>candidates=generateCandidates(curr);\n            for(auto i:candidates)\n            {\n              if(i==target)return ++ans;\n              if(vis.find(i)!=vis.end())continue;\n              if(ump.find(i)==ump.end())\n              {\n                bfs.push(i);\n                vis[i]=1;\n              }\n            }\n          }\n          ans++;\n        }  \n        return -1;      \n        \n    }\n};","compare_result":"11111111111111111111111111111111111111111111111","title_slug":"open-the-lock"}