{"id":527377193,"lang":"cpp","time":"1 month, 2 weeks","timestamp":1627106491,"status_display":"Time Limit Exceeded","runtime":"N/A","url":"/submissions/detail/527377193/","is_pending":"Not Pending","title":"01 Matrix","memory":"N/A","code":"#pragma GCC optimize(\"Ofast\")\n#pragma GCC target(\"avx,avx2,fma\")\nstatic auto _ = []() {\n  ios_base::sync_with_stdio(false);\n  cin.tie(nullptr);\n  cout.tie(nullptr);\n  return 0;\n}();\n\nclass Solution {\npublic:\n\n    // int dp[10001][10001];\n    \n    bool isSafe(vector<vector<int>>& matrix,int x,int y)\n    {\n        if(x>=0 and y>=0 and x<matrix.size() and y<matrix[0].size() and matrix[x][y]!=2)\n        return true;\n        \n        return false;\n    }\n    \n    int bfs(vector<vector<int>>matrix,int& i,int& j)\n    {\n        queue<pair<int,int>>q;\n        q.push({i,j});\n        int lvl=0;\n        while(!q.empty())\n        {\n            int len=q.size();\n            for(int k=0;k<len;k++)\n            {\n              pair<int,int>& temp=q.front();\n              q.pop();\n              int x=temp.first,y=temp.second;\n              // if(dp[x][y]!=-1)return (dp[i][j]=lvl+dp[x][y]);\n              if(matrix[x][y]==0)return lvl;\n              matrix[x][y]=2;\n              if(isSafe(matrix,x+1,y))q.push({x+1,y});\n              if(isSafe(matrix,x-1,y))q.push({x-1,y});\n              if(isSafe(matrix,x,y+1))q.push({x,y+1});\n              if(isSafe(matrix,x,y-1))q.push({x,y-1});\n            }\n            lvl++;\n        }\n        return lvl;\n    }\n\n    vector<vector<int>> updateMatrix(vector<vector<int>>& mat) {\n        vector<vector<int>>ans;\n        // memset(dp,-1,sizeof(dp));\n        for(int i=0;i<mat.size();i++)\n        {\n            vector<int>temp;\n            for(int j=0;j<mat[i].size();j++)\n            {\n                if(mat[i][j]==0)\n                temp.push_back(0);\n                else\n                temp.push_back(bfs(mat,i,j));\n            }\n            ans.push_back(temp);\n        }\n        return ans;\n    }\n};","compare_result":"1111111111111111111111111111111111111000000000000","title_slug":"01-matrix"}