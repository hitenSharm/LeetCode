{"id":501199140,"lang":"cpp","time":"3 months, 2 weeks","timestamp":1622524922,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/501199140/","is_pending":"Not Pending","title":"Maximize Sum Of Array After K Negations","memory":"N/A","code":"#pragma GCC optimize(\"Ofast\")\n#pragma GCC target(\"avx,avx2,fma\")\nstatic auto _ = []() {\n  ios_base::sync_with_stdio(false);\n  cin.tie(nullptr);\n  cout.tie(nullptr);\n  return 0;\n}();\n\nclass Solution {\npublic:\n    int largestSumAfterKNegations(vector<int>& nums, int k) {\n        sort(nums.begin(),nums.end());\n        int negs=0;int sumNegs=0;int sumPos=0;\n        for(int i=0;i<nums.size();i++)\n        {\n          if(nums[i]<=0)\n          {\n            negs++;\n            sumNegs+=nums[i];\n          }\n          else\n            sumPos+=nums[i];\n        }\n        while(k>negs and k>=2)\n        {\n          if(sumPos<abs(sumNegs))\n          {             \n            if(k-2>negs)\n            {              \n              k=k-2;\n              continue;\n            }\n            else\n              break;\n          }\n          else\n          { \n            k=k-2;\n          }\n        }  \n        \n        int tempSum=0;\n        for(int i=0;i<k;i++)\n        {\n           if(nums[i]<0)\n            tempSum=tempSum+abs(nums[i]);\n          else\n            tempSum=tempSum-nums[i];\n        } \n        sumNegs=sumNegs+(2*tempSum);\n        return sumNegs+sumPos;\n    }\n};\n\n","compare_result":"111111111101111111110101101111101111111111111111011110011101111010111111110100","title_slug":"maximize-sum-of-array-after-k-negations"}