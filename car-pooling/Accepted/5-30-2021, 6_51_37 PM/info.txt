{"id":500378633,"lang":"cpp","time":"3 months, 2 weeks","timestamp":1622380897,"status_display":"Accepted","runtime":"8 ms","url":"/submissions/detail/500378633/","is_pending":"Not Pending","title":"Car Pooling","memory":"9.5 MB","code":"#pragma GCC optimize(\"Ofast\")\n#pragma GCC target(\"avx,avx2,fma\")\nstatic auto _ = []() {\n  ios_base::sync_with_stdio(false);\n  cin.tie(nullptr);\n  cout.tie(nullptr);\n  return 0;\n}();\n\nclass Solution {\npublic:\n    bool carPooling(vector<vector<int>>& trips, int capacity) {\n        int loactions[1001]={0};\n        int mxLoacltion=0;int minLocation=1001;\n        for(int i=0;i<trips.size();i++)\n        {\n          int stLoaction=trips[i][1];\n          int enLoaction=trips[i][2];\n          int cap=trips[i][0];\n          loactions[stLoaction]+=cap;\n          loactions[enLoaction]=loactions[enLoaction]-cap;\n          mxLoacltion=max(mxLoacltion,enLoaction);\n          minLocation=min(minLocation,stLoaction);\n        }\n\n        for(int i=minLocation;i<=mxLoacltion;i++)\n        {\n          loactions[i]=loactions[i-1]+loactions[i];\n          if(loactions[i]>capacity)\n            return false;\n        }\n        return true;\n    }\n};","compare_result":"111111111111111111111111111111111111111111111111111111","title_slug":"car-pooling"}