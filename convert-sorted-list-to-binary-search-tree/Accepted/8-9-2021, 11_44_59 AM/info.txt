{"id":535611097,"lang":"cpp","time":"1Â month","timestamp":1628489699,"status_display":"Accepted","runtime":"32 ms","url":"/submissions/detail/535611097/","is_pending":"Not Pending","title":"Convert Sorted List to Binary Search Tree","memory":"31.4 MB","code":"/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\n/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n\n    TreeNode* makeTree(vector<int>& arr,int l,int r)\n    {\n        if(l>r || l<0 || r>=arr.size())return NULL;\n        int m=l+(r-l)/2;\n        TreeNode* root=new TreeNode(arr[m]);\n        root->left=makeTree(arr,l,m-1);\n        root->right=makeTree(arr,m+1,r);\n        return root;\n    }\n\n    TreeNode* sortedListToBST(ListNode* head) {\n        vector<int>arr;\n        while(head)\n        {\n            arr.push_back(head->val);\n            head=head->next;\n        }\n        TreeNode* root=makeTree(arr,0,arr.size()-1);\n        return root;\n    }\n};","compare_result":"11111111111111111111111111111111","title_slug":"convert-sorted-list-to-binary-search-tree"}