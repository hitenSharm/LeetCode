{"id":526994690,"lang":"cpp","time":"1 month, 3 weeks","timestamp":1627032071,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/526994690/","is_pending":"Not Pending","title":"Binary Tree Pruning","memory":"N/A","code":"#pragma GCC optimize(\"Ofast\")\n#pragma GCC target(\"avx,avx2,fma\")\nstatic auto _ = []() {\n  ios_base::sync_with_stdio(false);\n  cin.tie(nullptr);\n  cout.tie(nullptr);\n  return 0;\n}();\n/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n\n    void pruning(TreeNode* root,TreeNode* curr)\n    {\n        if(!root)return ;\n        \n        if(root->val!=1 and ((root->left and root->left->val!=1) || !root->left) and ((root->right and root->right->val!=1) || !root->right))\n        {\n            if(curr and curr->left and curr->left==root)\n            curr->left=NULL;\n            if(curr and curr->right and curr->right==root)\n            curr->right=NULL;\n            return ;\n        }\n        pruning(root->left,root);\n        pruning(root->right,root);\n        \n    }\n\n    TreeNode* pruneTree(TreeNode* root) {\n        pruning(root,NULL);\n        return root;\n    }\n};","compare_result":"111111011000110010000000000010","title_slug":"binary-tree-pruning"}