{"id":546108407,"lang":"cpp","time":"2Â weeks","timestamp":1630240949,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/546108407/","is_pending":"Not Pending","title":"Maximum Product Subarray","memory":"N/A","code":"#pragma GCC optimize(\"Ofast\")  \n#pragma GCC target(\"avx,avx2,fma\") \nstatic auto _ = [] ()\n{ios_base::sync_with_stdio(false);cin.tie(nullptr);cout.tie(nullptr);return 0;}();\n\nclass Solution {\npublic:\n    int maxProduct(vector<int>& nums) {\n        int prod=1;\n        int prodnegs=1;\n        vector<int>posi(nums.size());\n        vector<int>negi(nums.size());\n        for(int i=0;i<nums.size();i++)\n        {\n            if(nums[i]>0)\n            {\n                prod=prod*nums[i];\n                prodnegs=prodnegs*nums[i];\n                posi[i]=prod;negi[i]=prodnegs;\n            }\n            if(nums[i]<0)\n            {\n                prodnegs=prodnegs*nums[i];\n                negi[i]=prodnegs;\n                posi[i]=0;\n                prod=1;\n            }\n            if(nums[i]==0)\n            {\n                prod=1;\n                posi[i]=0;\n                prodnegs=1;\n                negi[i]=0;\n            }\n        }\n        int ans=*max_element(posi.begin(),posi.end());\n        ans=max(ans,*max_element(negi.begin(),negi.end()));\n        return ans;\n    }\n};","compare_result":"1101111111111111111100011111111011111111111111111111111111111111111111111111111111111110111111011101111111111111111111111111101111111111101111011111111111111111111111111111111100011101111","title_slug":"maximum-product-subarray"}