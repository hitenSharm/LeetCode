{"id":507772728,"lang":"cpp","time":"3Â months","timestamp":1623673419,"status_display":"Accepted","runtime":"52 ms","url":"/submissions/detail/507772728/","is_pending":"Not Pending","title":"Find the City With the Smallest Number of Neighbors at a Threshold Distance","memory":"17 MB","code":"#pragma GCC optimize(\"Ofast\")\n#pragma GCC target(\"avx,avx2,fma\")\nstatic auto _ = []() {\n  ios_base::sync_with_stdio(false);\n  cin.tie(nullptr);\n  cout.tie(nullptr);\n  return 0;\n}();\n\nclass Solution {\npublic:\n    vector<pair<int,int>> adjList[105];\n    unordered_map<int,int>cities;\n    \n    int dijkstra(int index,int& thresh,int n)\n    {            \n      int ans=0;      \n      vector<int> dist(n + 1, INT_MAX);\n      dist[index]=0;      \n      priority_queue<pair<int,int>, vector<pair<int,int>>, greater<pair<int,int>>> q; \n      q.push({0,index});\n      vector<int>vis;\n      \n      for(int i=0;i<n;i++)\n        vis.push_back(0);\n\n      while(!q.empty())\n      {\n        int ind=q.top().second;\n        q.pop();          \n        if(vis[ind]==1)continue;          \n        vis[ind]=1;                  \n        \n        for(auto i:adjList[ind])\n        {\n          int newCandid=i.first,newDist=i.second;          \n          if(dist[newCandid]>dist[ind]+newDist)\n          {              \n            dist[newCandid]=dist[ind]+newDist;\n            q.push({dist[newCandid],newCandid});\n          }\n        }\n      }\n      for(int i=0;i<n;i++)\n      {           \n        if(i!=index and dist[i]<=thresh)\n        {\n          ans++;\n        }\n      }        \n      return ans;\n    }\n\n\n    int findTheCity(int n, vector<vector<int>>& edges, int distanceThreshold) {\n        for(int i=0;i<edges.size();i++)\n        {\n          adjList[edges[i][0]].push_back({edges[i][1],edges[i][2]});\n          adjList[edges[i][1]].push_back({edges[i][0],edges[i][2]});\n        }        \n        \n        for(int i=0;i<n;i++)\n        {          \n          cities[i]=dijkstra(i,distanceThreshold,n);        \n        }\n        int mini=INT_MAX,city=INT_MIN;\n        for(auto i:cities)\n        {          \n          if(i.second<mini)\n          {\n            mini=i.second;\n            city=i.first;\n          }\n          if(i.second==mini)\n            city=max(city,i.first);\n        }\n        return city;\n    }\n};","compare_result":"111111111111111111111111111111111111111111111111111111","title_slug":"find-the-city-with-the-smallest-number-of-neighbors-at-a-threshold-distance"}