{"id":507730943,"lang":"cpp","time":"3Â months","timestamp":1623664432,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/507730943/","is_pending":"Not Pending","title":"Find the City With the Smallest Number of Neighbors at a Threshold Distance","memory":"N/A","code":"#pragma GCC optimize(\"Ofast\")\n#pragma GCC target(\"avx,avx2,fma\")\nstatic auto _ = []() {\n  ios_base::sync_with_stdio(false);\n  cin.tie(nullptr);\n  cout.tie(nullptr);\n  return 0;\n}();\n\nclass Solution {\npublic:\n    unordered_map<int,vector<vector<int>>>adjList;\n    unordered_map<int,int>cities;\n    \n    int dijkstra(int index,unordered_set<int>& vis,int& thresh,int n)\n    {            \n      int ans=0;      \n      int dist[101]={INT_MAX};\n      dist[index]=0;\n      priority_queue<pair<int,int>> q; \n      q.push({0,index});\n\n      while(!q.empty())\n      {\n        int ind=q.top().second;\n        q.pop();\n        if(vis.find(ind)!=vis.end())\n          continue;\n        vis.insert(ind);\n        vector<vector<int>>candidates=adjList[ind];\n        for(int i=0;i<candidates.size();i++)\n        {\n          int newCandid=candidates[i][0],newDist=candidates[i][1];\n          if(dist[newCandid]>dist[ind]+newDist)\n          {\n            dist[newCandid]=dist[ind]+newDist;\n            q.push({dist[newCandid],newCandid});\n          }\n        }\n      }\n      for(int i=0;i<n;i++)\n      {\n        if(i!=index and dist[i]<=thresh)\n        {\n          ans++;\n        }\n      }\n      return ans;\n    }\n\n\n    int findTheCity(int n, vector<vector<int>>& edges, int distanceThreshold) {\n        for(int i=0;i<edges.size();i++)\n        {\n          adjList[edges[i][0]].push_back({edges[i][1],edges[i][2]});\n          adjList[edges[i][1]].push_back({edges[i][0],edges[i][2]});\n        }        \n        unordered_set<int>vis;\n        for(int i=0;i<n;i++)\n        {          \n          cities[i]=dijkstra(i,vis,distanceThreshold,n);\n          vis.clear();\n        }\n        int mini=INT_MAX,city=INT_MIN;\n        for(auto i:cities)\n        {          \n          if(i.second<mini)\n          {\n            mini=i.second;\n            city=i.first;\n          }\n          if(i.second==mini)\n            city=max(city,i.first);\n        }\n        return city;\n    }\n};","compare_result":"101000101000011111111001011011000010100100001100000001","title_slug":"find-the-city-with-the-smallest-number-of-neighbors-at-a-threshold-distance"}