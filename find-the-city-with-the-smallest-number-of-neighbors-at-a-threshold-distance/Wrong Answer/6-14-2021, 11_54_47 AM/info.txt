{"id":507663925,"lang":"cpp","time":"3Â months","timestamp":1623651887,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/507663925/","is_pending":"Not Pending","title":"Find the City With the Smallest Number of Neighbors at a Threshold Distance","memory":"N/A","code":"#pragma GCC optimize(\"Ofast\")\n#pragma GCC target(\"avx,avx2,fma\")\nstatic auto _ = []() {\n  ios_base::sync_with_stdio(false);\n  cin.tie(nullptr);\n  cout.tie(nullptr);\n  return 0;\n}();\n\nclass Solution {\npublic:\n    unordered_map<int,vector<vector<int>>>adjList;\n    unordered_map<int,int>cities;\n    \n    int dfs(int index,unordered_set<int>& vis,int& thresh,int dist)\n    {      \n      vis.insert(index);\n      int ans=0;\n      vector<vector<int>>candidates=adjList[index];\n      for(int i=0;i<candidates.size();i++)\n      {\n        if(dist+candidates[i][1]<=thresh and vis.find(candidates[i][0])==vis.end())\n        {          \n          ans=ans + 1 + dfs(candidates[i][0],vis,thresh,dist+candidates[i][1]);\n        }\n      }\n      return ans;\n    }\n\n\n    int findTheCity(int n, vector<vector<int>>& edges, int distanceThreshold) {\n        for(int i=0;i<edges.size();i++)\n        {\n          adjList[edges[i][0]].push_back({edges[i][1],edges[i][2]});\n          adjList[edges[i][1]].push_back({edges[i][0],edges[i][2]});\n        }        \n        unordered_set<int>vis;\n        for(int i=0;i<n;i++)\n        {          \n          cities[i]=dfs(i,vis,distanceThreshold,0);\n          vis.clear();\n        }\n        int mini=INT_MAX,city=INT_MIN;\n        for(auto i:cities)\n        {          \n          if(i.second<mini)\n          {\n            mini=i.second;\n            city=i.first;\n          }\n          if(i.second==mini)\n            city=max(city,i.first);\n        }\n        return city;\n    }\n};","compare_result":"111111110111111111111111010111100111011111010111000010","title_slug":"find-the-city-with-the-smallest-number-of-neighbors-at-a-threshold-distance"}