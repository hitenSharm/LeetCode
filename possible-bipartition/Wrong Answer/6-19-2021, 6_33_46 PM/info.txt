{"id":510127262,"lang":"cpp","time":"2 months, 3 weeks","timestamp":1624107826,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/510127262/","is_pending":"Not Pending","title":"Possible Bipartition","memory":"N/A","code":"#pragma GCC optimize(\"Ofast\")\n#pragma GCC target(\"avx,avx2,fma\")\nstatic auto _ = []() {\n  ios_base::sync_with_stdio(false);\n  cin.tie(nullptr);\n  cout.tie(nullptr);\n  return 0;\n}();\n\nclass Solution {\npublic:\n\n    unordered_map<int,int>ump;\n    unordered_map<int,vector<int>>adjList;\n    vector<int>vis;\n    \n    bool bfs(int st)\n    {\n        queue<int>ind;\n        int start=st;\n        ind.push(start);\n        int curr=0;\n        ump[start]=0;\n        while(!ind.empty())\n        {\n            start=ind.front();\n            ind.pop();\n            curr=ump[start];\n            int comple=1;\n            if(curr==1)comple=0;\n            \n            if(vis[start]==1)continue;\n            \n            vis[start]=1;\n            ump[start]=curr;\n            vector<int>candidates=adjList[start];\n            for(int i=0;i<candidates.size();i++)\n            {\n                if(vis[candidates[i]]==1)continue;\n                if(ump.find(candidates[i])!=ump.end() and ump[candidates[i]]!=comple)\n                {                    \n                    return false;\n                }                                \n                else\n                {\n                    ind.push(candidates[i]);\n                    ump[candidates[i]]=comple;                                        \n                }\n            }            \n        }\n        return true;\n    }\n    \n    bool possibleBipartition(int n, vector<vector<int>>& dislikes) {\n        vis.resize(n+1,0);\n        \n        for(int i=0;i<dislikes.size();i++)\n        {\n            adjList[dislikes[i][0]].push_back(dislikes[i][1]);\n            adjList[dislikes[i][1]].push_back(dislikes[i][0]);\n        }        \n        \n       for(auto it:adjList)\n        {\n            if(bfs(it.first))\n            return true;\n            else\n            {\n                fill(vis.begin(),vis.end(),0);\n                ump.clear();\n            }\n        }\n       return false; \n    }\n};","compare_result":"1111011010111111111111111111111111111111111111111111111111111110111111","title_slug":"possible-bipartition"}