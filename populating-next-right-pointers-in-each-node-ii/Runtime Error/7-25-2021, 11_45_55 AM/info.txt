{"id":527928884,"lang":"cpp","time":"1 month, 2 weeks","timestamp":1627193755,"status_display":"Runtime Error","runtime":"N/A","url":"/submissions/detail/527928884/","is_pending":"Not Pending","title":"Populating Next Right Pointers in Each Node II","memory":"N/A","code":"#pragma GCC optimize(\"Ofast\")\n#pragma GCC target(\"avx,avx2,fma\")\nstatic auto _ = []() {\n  ios_base::sync_with_stdio(false);\n  cin.tie(nullptr);\n  cout.tie(nullptr);\n  return 0;\n}();\n/*\n// Definition for a Node.\nclass Node {\npublic:\n    int val;\n    Node* left;\n    Node* right;\n    Node* next;\n\n    Node() : val(0), left(NULL), right(NULL), next(NULL) {}\n\n    Node(int _val) : val(_val), left(NULL), right(NULL), next(NULL) {}\n\n    Node(int _val, Node* _left, Node* _right, Node* _next)\n        : val(_val), left(_left), right(_right), next(_next) {}\n};\n*/\nclass Solution {\npublic:\n    Node* connect(Node* root) {\n       queue<Node*>q; \n       q.push(root);\n       while(!q.empty())\n       {\n           int len=q.size();\n           Node* temp=q.front();q.pop();\n           if(temp->left)q.push(temp->left);\n           if(temp->right)q.push(temp->right);\n           for(int i=0;i<len-1;i++)\n           {\n               Node* nxt=q.front();q.pop();\n               temp->next=nxt;\n               temp=nxt;\n               if(temp->left)q.push(temp->left);\n               if(temp->right)q.push(temp->right);\n           }\n       }\n       return root;\n    }\n};","compare_result":"1000000000000000000000000000000000000000000000000000000","title_slug":"populating-next-right-pointers-in-each-node-ii"}