{"id":509557214,"lang":"cpp","time":"2 months, 3 weeks","timestamp":1623993773,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/509557214/","is_pending":"Not Pending","title":"Number of Subarrays with Bounded Maximum","memory":"N/A","code":"#pragma GCC optimize(\"Ofast\")\n#pragma GCC target(\"avx,avx2,fma\")\nstatic auto _ = []() {\n  ios_base::sync_with_stdio(false);\n  cin.tie(nullptr);\n  cout.tie(nullptr);\n  return 0;\n}();\n\nclass Solution {\npublic:\n    int numSubarrayBoundedMax(vector<int>& nums, int left, int right) {\n        int i=0,j=0;\n        multiset<int>ele;\n        int ans=0;\n        while(i<nums.size())\n        {\n            while(j<nums.size() and nums[j]<=right)\n            {\n                ele.insert(nums[j]);\n                j++;                \n            }\n            while(i<j and i<nums.size())\n            {\n                auto it=ele.rbegin();\n                int val=*it;\n                if(val>=left and val<=right)\n                {\n                    if(nums[i]>=left)\n                    {\n                        ans++;\n                        ans=ans+(j-i-1);\n                    }\n                    else\n                    {\n                        ans=ans+(j-i-1);\n                    }\n                }\n                auto itr=ele.find(nums[i]);                \n                ele.erase(itr);\n                i++;\n            }\n            i++;\n            j=i;\n        }\n        return ans;\n    }\n};","compare_result":"1111111100110000110000000000000000000000000","title_slug":"number-of-subarrays-with-bounded-maximum"}