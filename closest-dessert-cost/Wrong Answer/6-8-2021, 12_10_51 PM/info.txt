{"id":504795837,"lang":"cpp","time":"3Â months","timestamp":1623134451,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/504795837/","is_pending":"Not Pending","title":"Closest Dessert Cost","memory":"N/A","code":"#pragma GCC optimize(\"Ofast\")\n#pragma GCC target(\"avx,avx2,fma\")\nstatic auto _ = []() {\n  ios_base::sync_with_stdio(false);\n  cin.tie(nullptr);\n  cout.tie(nullptr);\n  return 0;\n}();\n\nclass Solution {\npublic:\n\n    void recu(vector<int>& topping,multiset <int, greater <int> >&p,int cost,int index)\n    {\n      if(index==topping.size())\n      {\n        p.insert(cost);\n        return ;\n      }\n      recu(topping,p,cost+topping[index],index+1);\n      recu(topping,p,cost+(2*topping[index]),index+1);\n      recu(topping,p,cost,index+1);\n    }\n\n    int closestCost(vector<int>& baseCosts, vector<int>& toppingCosts, int target) {\n        multiset <int, greater <int> > possibles;\n        recu(toppingCosts,possibles,0,0);\n        int ans=INT_MAX;\n        int diff=INT_MAX;\n        for(int i=0;i<baseCosts.size();i++)\n        {\n          int temp=target-baseCosts[i];\n          if(temp==0)\n            return target;\n          if(temp<0)\n          {\n            if(abs(temp)<=diff)\n            {              \n              if(abs(temp)==diff)ans=min(ans,baseCosts[i]);\n              else\n                ans=baseCosts[i];\n              diff=abs(temp);\n            }\n          }\n          else\n          {\n            auto it=possibles.lower_bound(temp);\n            int tempDiff=baseCosts[i]+(*it);\n            if(abs(target-tempDiff)<=diff)\n            {              \n              if(abs(target-tempDiff)==diff)ans=min(ans,tempDiff);\n              else\n                ans=tempDiff;\n              diff=abs(target-tempDiff);\n            }\n          }\n        }\n        return ans;\n\n    }\n};","compare_result":"11111111111011111111111111111011010111111111011111111101011111001111001111000101000110111","title_slug":"closest-dessert-cost"}