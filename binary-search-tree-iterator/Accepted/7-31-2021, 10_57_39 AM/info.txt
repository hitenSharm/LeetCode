{"id":530919116,"lang":"cpp","time":"1 month, 2 weeks","timestamp":1627709259,"status_display":"Accepted","runtime":"32 ms","url":"/submissions/detail/530919116/","is_pending":"Not Pending","title":"Binary Search Tree Iterator","memory":"24.3 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass BSTIterator {\npublic:\n    vector<int>arr;\n    int i=0;\n    void inorder(TreeNode* root)\n    {\n        if(!root)return ;\n        inorder(root->left);     \n        arr.push_back(root->val);\n        inorder(root->right);\n    }\n    \n    BSTIterator(TreeNode* root) {\n        inorder(root);\n    }\n    \n    int next() {\n        i++;\n        return arr[i-1];        \n    }\n    \n    bool hasNext() {\n        if(i<arr.size())return true;\n        return false;\n    }\n};\n\n/**\n * Your BSTIterator object will be instantiated and called as such:\n * BSTIterator* obj = new BSTIterator(root);\n * int param_1 = obj->next();\n * bool param_2 = obj->hasNext();\n */","compare_result":"1111111111111111111111111111111111111111111111111111111111111","title_slug":"binary-search-tree-iterator"}