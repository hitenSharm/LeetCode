{"id":513343459,"lang":"cpp","time":"2 months, 2 weeks","timestamp":1624696605,"status_display":"Accepted","runtime":"164 ms","url":"/submissions/detail/513343459/","is_pending":"Not Pending","title":"Count of Smaller Numbers After Self","memory":"92.6 MB","code":"#pragma GCC optimize(\"Ofast\")\n#pragma GCC target(\"avx,avx2,fma\")\nstatic auto _ = []() {\n  ios_base::sync_with_stdio(false);\n  cin.tie(nullptr);\n  cout.tie(nullptr);\n  return 0;\n}();\n\nclass Solution {\npublic:\n\n    vector<int>bitPos;\n    vector<int>bitNeg;\n    \n    void update(int index,int val,int fl)\n    {\n        if(index==0)index++;\n        int n=bitNeg.size();\n        if(fl==1)n=bitPos.size();\n        for(;index<n;index+=(index & -index))\n        {\n            if(fl==1)\n            bitPos[index]+=val;\n            else\n            bitNeg[index]+=val;\n        }\n    }\n    \n    int sum(int index,int fl)\n    {\n        if(index==0) return 0;\n        int ans=0;\n        for(;index>0;index-=(index & -index))\n        {\n            if(fl==1)\n            ans+=bitPos[index];\n            else\n            ans+=bitNeg[index];\n        }\n        return ans;\n    }\n\n    vector<int> countSmaller(vector<int>& nums) {\n        int maxi=*max_element(nums.begin(),nums.end());\n        int mini=*min_element(nums.begin(),nums.end());\n        unordered_map<int,int>ump;\n        vector<int>cnt;\n        bitPos.resize(abs(maxi)+1,0);\n        bitNeg.resize(abs(mini)+1,0);\n        int nega=0;\n        for(int i=nums.size()-1;i>=0;i--)\n        {\n            if(nums[i]>0)\n            {\n                update(nums[i],1,1);\n                int tmp=sum(maxi,1)-sum(nums[i],1);\n                tmp=nums.size()-i-1-tmp-ump[nums[i]];\n                cnt.push_back(tmp);\n            }\n            if(nums[i]<0)\n            {\n                nega++;\n                update(abs(nums[i]),1,0);\n                int tmp=sum(abs(mini),0)-sum(abs(nums[i]),0);\n                cnt.push_back(tmp);\n            }\n            if(nums[i]==0)\n            cnt.push_back(nega);\n            \n            ump[nums[i]]++;\n        }\n        reverse(cnt.begin(), cnt.end());\n        return cnt;\n        \n    }\n};","compare_result":"11111111111111111111111111111111111111111111111111111111111111111","title_slug":"count-of-smaller-numbers-after-self"}