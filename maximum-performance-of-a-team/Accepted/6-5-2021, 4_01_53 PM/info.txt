{"id":503308641,"lang":"cpp","time":"3 months, 1 week","timestamp":1622889113,"status_display":"Accepted","runtime":"84 ms","url":"/submissions/detail/503308641/","is_pending":"Not Pending","title":"Maximum Performance of a Team","memory":"37.4 MB","code":"#pragma GCC optimize(\"Ofast\")\n#pragma GCC target(\"avx,avx2,fma\")\nstatic auto _ = []() {\n  ios_base::sync_with_stdio(false);\n  cin.tie(nullptr);\n  cout.tie(nullptr);\n  return 0;\n}();\n\nclass Solution {\npublic:\n    int maxPerformance(int n, vector<int>& speed, vector<int>& efficiency, int k) {\n        vector<pair<int,int>>vec;\n        long long mod=1000000007;\n        for(int i=0;i<n;i++)\n        {\n          vec.push_back(make_pair(efficiency[i],speed[i]));\n        }\n        sort(vec.rbegin(),vec.rend());        \n        priority_queue <int, vector<int>, greater<int> > pq;\n\n        long long sumSpeeds=0, ans=0;\n\n        for(auto [eff,speed]:vec)\n        {\n          pq.push(speed);\n          sumSpeeds+=speed;\n          if(pq.size()>k)\n          {\n            sumSpeeds-=pq.top();\n            pq.pop();\n          }\n          ans=max(ans,sumSpeeds*eff);\n        }\n        \n        return ans%mod;\n    }\n};","compare_result":"111111111111111111111111111111111111111111111111111111","title_slug":"maximum-performance-of-a-team"}