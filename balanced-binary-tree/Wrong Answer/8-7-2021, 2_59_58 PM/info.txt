{"id":534619708,"lang":"cpp","time":"1Â month","timestamp":1628328598,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/534619708/","is_pending":"Not Pending","title":"Balanced Binary Tree","memory":"N/A","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    \n    int lvlOrder(TreeNode* root)\n    {\n        if(!root)return 0;\n        int level=1;\n        queue<TreeNode*>q;\n        q.push(root);\n        while(!q.empty())\n        {\n            int len=q.size();\n            for(int i=0;i<len;i++)\n            {\n                TreeNode* temp=q.front();q.pop();\n                if(temp->left)q.push(temp->left);\n                if(temp->right)q.push(temp->right);\n            }\n            level++;\n        }\n        return level;\n    }\n    \n    bool isBalanced(TreeNode* root) {\n        if(!root)return true;\n        int left=lvlOrder(root->left);\n        int ryt=lvlOrder(root->right);\n        if(abs(left-ryt)<=1)return true;\n        \n        return false;\n    }\n};","compare_result":"111100111111011011110011111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111110010000100000011000011111111111111111111111111111111111111111111111111111111111111111000001111","title_slug":"balanced-binary-tree"}