{"id":510566198,"lang":"cpp","time":"2 months, 3 weeks","timestamp":1624181637,"status_display":"Time Limit Exceeded","runtime":"N/A","url":"/submissions/detail/510566198/","is_pending":"Not Pending","title":"Swim in Rising Water","memory":"N/A","code":"#pragma GCC optimize(\"Ofast\")\n#pragma GCC target(\"avx,avx2,fma\")\nstatic auto _ = []() {\n  ios_base::sync_with_stdio(false);\n  cin.tie(nullptr);\n  cout.tie(nullptr);\n  return 0;\n}();\n\nclass Solution {\npublic:\n\n    int n;\n    vector<vector<int>>vis;\n    int dirs[5]={1,0,-1,0,1};\n    \n    int dfs(vector<vector<int>>grid,int i,int j)\n    {\n      if(i==n-1 and j==n-1)\n      return 1;\n\n      if(vis[i][j]==1 || grid[i][j]==-1)\n      return 0;\n\n      vis[i][j]=1;\n      int ans=0;\n      for(int dir=0;dir<4;dir++)\n      {\n        int k=dirs[dir],k2=dirs[dir+1];\n        if(i+k>=0 and i+k<n and j+k2>=0 and j+k2<n and vis[i+k][j+k2]==0 and grid[i+k][j+k2]!=-1)\n        {          \n          ans=dfs(grid,i+k,j+k2);\n          if(ans==1)\n          break;\n        }\n      }\n      vis[i][j]=0;\n    return ans;\n    }\n\n    int swimInWater(vector<vector<int>>& grid) {\n        n=grid.size();\n        vis.resize(n,vector<int>(n,0));\n        int l=1,r=50*49;\n        int sol=INT_MAX;\n        while(l<=r)\n        {\n          int m=l+(r-l)/2;\n          vector<vector<int>>dfsGrid(n,vector<int>(n,0));\n          for(int i=0;i<n;i++)\n          {\n            for(int j=0;j<n;j++)\n            {\n              if(grid[i][j]>m)\n              dfsGrid[i][j]=-1;\n              else\n              dfsGrid[i][j]=grid[i][j];\n            }\n          }\n          int ans=dfs(dfsGrid,0,0);\n          if(ans==1)\n          {\n            sol=min(sol,m);\n            r=m-1;\n          }\n          else\n          l=m+1;\n        }\n      return sol;\n    }\n};","compare_result":"11111111111111111111100000000000000000000","title_slug":"swim-in-rising-water"}