{"id":536810022,"lang":"cpp","time":"1Â month","timestamp":1628684668,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/536810022/","is_pending":"Not Pending","title":"Subtree of Another Tree","memory":"N/A","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    \n    bool isSame(TreeNode* s,TreeNode*t)\n    {\n        if(!s and !t)return true;\n        if(!s || !t)return false;\n        return (s->val==t->val) and (inorder(s->left,t->left) and inorder(s->right,t->right));\n    }\n    \n    bool inorder(TreeNode* root,TreeNode* subRoot)\n    {\n        if(!subRoot and !root)return true;\n        if(!root || !subRoot)return false;\n        return isSame(root,subRoot)||(inorder(root->left,subRoot) || inorder(root->right,subRoot));\n    }\n\n    bool isSubtree(TreeNode* root, TreeNode* subRoot) {\n        return inorder(root,subRoot);\n    }\n};","compare_result":"11111111100111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111110110101","title_slug":"subtree-of-another-tree"}