{"id":507805173,"lang":"cpp","time":"3Â months","timestamp":1623679492,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/507805173/","is_pending":"Not Pending","title":"Koko Eating Bananas","memory":"N/A","code":"#pragma GCC optimize(\"Ofast\")\n#pragma GCC target(\"avx,avx2,fma\")\nstatic auto _ = []() {\n  ios_base::sync_with_stdio(false);\n  cin.tie(nullptr);\n  cout.tie(nullptr);\n  return 0;\n}();\n\nclass Solution {\npublic:\n\n    int findTime(vector<int>piles, int& h,int k)\n    {\n        int ans=0,fl=0;        \n        for(int i=0;i<piles.size();i++)\n        {\n            if(ans>h)\n            {\n             fl=1;\n             break;\n            }\n            if(piles[i]<=k)\n            {\n                ans++;\n                piles[i]=0;\n                continue;\n            }\n            if(piles[i]>k)\n            {                \n                int tmp=piles[i]/k + (piles[i] % k !=0);                \n                ans+=tmp;\n                piles[i]=0;\n            }\n        }\n        if(fl==1 ||ans>h)        \n        return -1;\n        \n        return ans;\n    }\n\n    int minEatingSpeed(vector<int>& piles, int h) {\n        if(piles.size()==1)\n        {\n            int ans=piles[0]/h + (piles[0] % h !=0);\n            return ans;\n        }\n        sort(piles.begin(),piles.end());\n        int r=*max_element(piles.begin(),piles.end());\n        int l=*min_element(piles.begin(),piles.end());\n        int ans=INT_MAX;\n        while(l<=r)\n        {\n            int m=l+(r-l)/2;\n            int tmp=findTime(piles,h,m);            \n            if(tmp==-1)\n            {\n                l=m+1;\n            }\n            else\n            {\n                ans=min(ans,m);\n                r=m-1;\n            }\n        }\n        return ans;\n    }\n};","compare_result":"1111100000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111","title_slug":"koko-eating-bananas"}