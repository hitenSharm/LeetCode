{"id":526486353,"lang":"cpp","time":"1 month, 3 weeks","timestamp":1626948301,"status_display":"Accepted","runtime":"16 ms","url":"/submissions/detail/526486353/","is_pending":"Not Pending","title":"Partition Array into Disjoint Intervals","memory":"21.9 MB","code":"#pragma GCC optimize(\"Ofast\")\n#pragma GCC target(\"avx,avx2,fma\")\nstatic auto _ = []() {\n  ios_base::sync_with_stdio(false);\n  cin.tie(nullptr);\n  cout.tie(nullptr);\n  return 0;\n}();\n\nclass Solution {\npublic:\n    int partitionDisjoint(vector<int>& nums) {\n        vector<int>miniRight(nums.size());\n        vector<int>maxiLeft(nums.size());\n        \n        maxiLeft[0]=nums[0];\n        miniRight[nums.size()-1]=nums[nums.size()-1];\n        \n        for(int i=nums.size()-2;i>=0;i--)\n        miniRight[i]=min(miniRight[i+1],nums[i]);\n        \n        for(int i=1;i<nums.size();i++)\n        maxiLeft[i]=max(maxiLeft[i-1],nums[i]);\n        \n        int i=0,j=1;\n        \n        while(i<nums.size() and j<nums.size() and maxiLeft[i]>miniRight[j])\n        {\n            i++;\n            j++;\n        }\n        return i+1;\n    }\n};","compare_result":"11111111111111111111111111111111111111111111111111111111","title_slug":"partition-array-into-disjoint-intervals"}